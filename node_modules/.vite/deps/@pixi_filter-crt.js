import {
  Filter,
  init_core
} from "./chunk-77HXZFP2.js";
import "./chunk-QOVRSCHT.js";

// node_modules/@pixi/filter-crt/dist/filter-crt.esm.js
init_core();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) {
      if (Object.prototype.hasOwnProperty.call(b2, p)) {
        d2[p] = b2[p];
      }
    }
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";
var fragment = "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform vec4 filterArea;\nuniform vec2 dimensions;\n\nconst float SQRT_2 = 1.414213;\n\nconst float light = 1.0;\n\nuniform float curvature;\nuniform float lineWidth;\nuniform float lineContrast;\nuniform bool verticalLine;\nuniform float noise;\nuniform float noiseSize;\n\nuniform float vignetting;\nuniform float vignettingAlpha;\nuniform float vignettingBlur;\n\nuniform float seed;\nuniform float time;\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid main(void)\n{\n    vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\n    vec2 dir = vec2(vTextureCoord.xy * filterArea.xy / dimensions - vec2(0.5, 0.5));\n    \n    gl_FragColor = texture2D(uSampler, vTextureCoord);\n    vec3 rgb = gl_FragColor.rgb;\n\n    if (noise > 0.0 && noiseSize > 0.0)\n    {\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\n        rgb += _noise * noise;\n    }\n\n    if (lineWidth > 0.0)\n    {\n        float _c = curvature > 0. ? curvature : 1.;\n        float k = curvature > 0. ?(length(dir * dir) * 0.25 * _c * _c + 0.935 * _c) : 1.;\n        vec2 uv = dir * k;\n\n        float v = (verticalLine ? uv.x * dimensions.x : uv.y * dimensions.y) * min(1.0, 2.0 / lineWidth ) / _c;\n        float j = 1. + cos(v * 1.2 - time) * 0.5 * lineContrast;\n        rgb *= j;\n        float segment = verticalLine ? mod((dir.x + .5) * dimensions.x, 4.) : mod((dir.y + .5) * dimensions.y, 4.);\n        rgb *= 0.99 + ceil(segment) * 0.015;\n    }\n\n    if (vignetting > 0.0)\n    {\n        float outter = SQRT_2 - vignetting * SQRT_2;\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\n        rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\n    }\n\n    gl_FragColor.rgb = rgb;\n}\n";
var CRTFilter = function(_super) {
  __extends(CRTFilter2, _super);
  function CRTFilter2(options) {
    var _this = _super.call(this, vertex, fragment) || this;
    _this.time = 0;
    _this.seed = 0;
    _this.uniforms.dimensions = new Float32Array(2);
    Object.assign(_this, CRTFilter2.defaults, options);
    return _this;
  }
  CRTFilter2.prototype.apply = function(filterManager, input, output, clear) {
    var _a = input.filterFrame, width = _a.width, height = _a.height;
    this.uniforms.dimensions[0] = width;
    this.uniforms.dimensions[1] = height;
    this.uniforms.seed = this.seed;
    this.uniforms.time = this.time;
    filterManager.applyFilter(this, input, output, clear);
  };
  Object.defineProperty(CRTFilter2.prototype, "curvature", {
    get: function() {
      return this.uniforms.curvature;
    },
    set: function(value) {
      this.uniforms.curvature = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "lineWidth", {
    get: function() {
      return this.uniforms.lineWidth;
    },
    set: function(value) {
      this.uniforms.lineWidth = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "lineContrast", {
    get: function() {
      return this.uniforms.lineContrast;
    },
    set: function(value) {
      this.uniforms.lineContrast = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "verticalLine", {
    get: function() {
      return this.uniforms.verticalLine;
    },
    set: function(value) {
      this.uniforms.verticalLine = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "noise", {
    get: function() {
      return this.uniforms.noise;
    },
    set: function(value) {
      this.uniforms.noise = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "noiseSize", {
    get: function() {
      return this.uniforms.noiseSize;
    },
    set: function(value) {
      this.uniforms.noiseSize = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "vignetting", {
    get: function() {
      return this.uniforms.vignetting;
    },
    set: function(value) {
      this.uniforms.vignetting = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "vignettingAlpha", {
    get: function() {
      return this.uniforms.vignettingAlpha;
    },
    set: function(value) {
      this.uniforms.vignettingAlpha = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CRTFilter2.prototype, "vignettingBlur", {
    get: function() {
      return this.uniforms.vignettingBlur;
    },
    set: function(value) {
      this.uniforms.vignettingBlur = value;
    },
    enumerable: false,
    configurable: true
  });
  CRTFilter2.defaults = {
    curvature: 1,
    lineWidth: 1,
    lineContrast: 0.25,
    verticalLine: false,
    noise: 0,
    noiseSize: 1,
    seed: 0,
    vignetting: 0.3,
    vignettingAlpha: 1,
    vignettingBlur: 0.3,
    time: 0
  };
  return CRTFilter2;
}(Filter);
export {
  CRTFilter
};
/*!
 * @pixi/filter-crt - v4.1.6
 * Compiled Thu, 03 Feb 2022 14:30:04 UTC
 *
 * @pixi/filter-crt is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=@pixi_filter-crt.js.map
